on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: read

jobs:
  cd:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4  # 현재 리포지토리 코드 가져오기

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 캐시 설정
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 환경 변수 파일 생성 (.env)
        run: |
          echo "${{ secrets.PROD_ENV }}" > .env

      - name: Gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle 빌드
        run: ./gradlew build

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Docker 이미지 빌드 및 푸시
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
          
          # active_env.txt 파일이 없을 경우 기본값으로 Blue 설정
          # EC2 서버의 active_env.txt 파일 확인 및 저장
          CURRENT_ENV=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cat /home/${{ secrets.SSH_USER }}/deploy/active_env.txt || echo 'blue'")
          echo "$CURRENT_ENV" > active_env.txt
          
          # 현재 활성화된 환경 확인
          if [ "$CURRENT_ENV" == "blue" ]; then
            NEXT_ENV="green"
          else
            NEXT_ENV="blue"
          fi
          
          echo "현재 환경: $CURRENT_ENV"
          echo "$NEXT_ENV 환경으로 전환합니다."
          docker build -t $DOCKERHUB_USERNAME/manchui_server:$NEXT_ENV .
          docker push $DOCKERHUB_USERNAME/manchui_server:$NEXT_ENV

      - name: active_env.txt 파일 복사
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa active_env.txt ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/deploy/active_env.txt
          
      - name: 환경 변수 파일 복사 (.env)
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/deploy/.env
          
      - name: docker-compose.yml 파일 복사
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/deploy/docker-compose.yml

      - name: Nginx 폴더 복사
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r Nginx ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/deploy
          
      - name: 다음 환경으로 배포
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e
            export NEXT_ENV=$NEXT_ENV
            echo "$NEXT_ENV 환경으로 배포 중입니다..."
            
            # 이전 환경 읽기
            export PREVIOUS_ENV=$CURRENT_ENV
            echo "이전 환경: $PREVIOUS_ENV" 
          
            # 작업 디렉토리 이동
            cd /home/${{ secrets.SSH_USER }}/deploy
          
            # 다음 환경의 컨테이너 실행
            sudo docker-compose up -d $NEXT_ENV
          
            # active_env.txt 파일 업데이트
            echo $NEXT_ENV > active_env.txt
          
            # Nginx proxy_pass 전환
            sed -i "s|proxy_pass http://.*;|proxy_pass http://$NEXT_ENV;|g" Nginx/config/nginx.conf

            echo "Nginx 설정 변경 사항 반영 중입니다..."
          
            # Nginx 설정 파일 검증
            if ! docker exec nginx-container nginx -t; then
              echo "Nginx 설정 파일 검증 실패! Nginx 로그 확인 필요.";
              sudo docker logs nginx-container;
              exit 1;
            fi
          
            # Nginx 설정 다시 로드 (무중단)
            sudo docker exec nginx-container nginx -s reload
            echo "Nginx 설정 파일이 성공적으로 반영되었습니다."
          EOF
          
      - name: 이전 환경 컨테이너 정리
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e
            echo "이전 환경 컨테이너를 정리합니다..."
            cd /home/${{ secrets.SSH_USER }}/deploy
          
            export NEXT_ENV=$NEXT_ENV
            export PREVIOUS_ENV=$CURRENT_ENV
          
            #이전 환경 제거
            if [ "$PREVIOUS_ENV" != "$NEXT_ENV" ]; then
              echo "이전 환경($PREVIOUS_ENV) 컨테이너를 제거합니다."
              sudo docker-compose stop $PREVIOUS_ENV
              sudo docker-compose rm -f $PREVIOUS_ENV
              echo "$PREVIOUS_ENV 컨테이너가 성공적으로 제거되었습니다."
            else
              echo "현재 환경과 이전 환경이 동일합니다. 정리 작업을 건너뜁니다."
            fi
          EOF

      - name: .env 파일 정리
        run: rm .env
