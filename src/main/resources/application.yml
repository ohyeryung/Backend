# 로컬 환경 설정
spring:
  application:
    name: manchui

  profiles:
    default: local

  config:
    import: optional:file:.env[.properties]

  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  # 이미지 크기 제한
  servlet:
    multipart:
      maxFileSize: ${MAX_FILE_SIZE}
      maxRequestSize: ${MAX_REQUEST_SIZE}
      enabled: true

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
    defer-datasource-initialization: true

  jwt:
    secret: ${JWT_SECRET_KEY}

token:
  access:
    expiration: ${ACCESS_TOKEN_EXPIRATION}
  refresh:
    expiration: ${REFRESH_TOKEN_EXPIRATION}

cloud:
  aws:
    region:
      static: ${AWS_REGION}
    stack:
      auto: false
    s3:
      bucket: ${BUCKET_NAME}
    credentials:
      access-key: ${ACCESS_KEY}
      secret-key: ${SECRET_KEY}

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

gathering:
  date-pattern: "yyyy-MM-dd HH:mm:ss"
  due-date-hours-before: 5

---

# 배포 환경 설정

spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update # 배포 환경에서는 update 사용
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
    defer-datasource-initialization: true

  servlet:
    multipart:
      maxFileSize: ${MAX_FILE_SIZE}
      maxRequestSize: ${MAX_REQUEST_SIZE}

  jwt:
    secret: ${JWT_SECRET_KEY}

token:
  access:
    expiration: ${ACCESS_TOKEN_EXPIRATION}
  refresh:
    expiration: ${REFRESH_TOKEN_EXPIRATION}

  redis:
    data:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

# S3 이미지 설정
cloud:
  aws:
    region:
      static: ${AWS_REGION}
    stack:
      auto: false
    s3:
      bucket: ${BUCKET_NAME}
    credentials:
      access-key: ${ACCESS_KEY}
      secret-key: ${SECRET_KEY}

gathering:
  date-pattern: "yyyy-MM-dd HH:mm:ss"
  due-date-hours-before: 5
